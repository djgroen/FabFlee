cd $job_results
$run_prefix
export PYTHONPATH=$flee_location:$$PYTHONPATH
export PATH=~/.local/bin/:$$PATH
/usr/bin/env > env.log

export FLEE_TYPE_CHECK=$FLEE_TYPE_CHECK

#-------------------------------------------------------
#             set global variables
#-------------------------------------------------------
NUM_INSTANCES=$num_instances
cores=$instance_cores
INPUT_DATA_DIR="input_csv"
RUN_PYTHON_FILE="run_couple.py"
LOG_EXCHANGE_DATA="True"
COUPLING_TYPE="$coupling_type"
YMMSL_TEMPLATE_FILE="macro_micro_template.ymmsl"
YMMSL_FILE="macro_micro.ymmsl"
WEATHER_COUPLING="$weather_coupling"


#-------------------------------------------------------
#             set run_command variable
#-------------------------------------------------------
set_run_command(){
  run_command=""  
  if [ "$$cores" -gt "1" ];
  then
    run_command="mpirun -n $$cores python3"
  else
    run_command="python3"
  fi
}
set_run_command

#-------------------------------------------------------
#             clean output directory
#-------------------------------------------------------
weather_coupling=$weather_coupling
if [ "$$weather_coupling" = "true" ];
then
  rm -rf out/weather/$$COUPLING_TYPE/*
  mkdir -p out/weather/$$COUPLING_TYPE/coupled
  mkdir -p out/weather/$$COUPLING_TYPE/macro
  mkdir -p out/weather/$$COUPLING_TYPE/micro
  mkdir -p out/weather/$$COUPLING_TYPE/log_exchange_data
  mkdir -p out/weather/$$COUPLING_TYPE/plot_exchange_data
else
  rm -rf out/$$COUPLING_TYPE/*
  mkdir -p out/$$COUPLING_TYPE/coupled
  mkdir -p out/$$COUPLING_TYPE/macro
  mkdir -p out/$$COUPLING_TYPE/micro
  mkdir -p out/$$COUPLING_TYPE/log_exchange_data
  mkdir -p out/$$COUPLING_TYPE/plot_exchange_data
fi


#-------------------------------------------------------
#             create input ymmsl from template
#-------------------------------------------------------
# - copy ymmsl template file
cp $$YMMSL_TEMPLATE_FILE $$YMMSL_FILE 
# - set number of instances into ymmsl file for both macro and micro model 
sed -i "s#NUM_INSTANCES#$$NUM_INSTANCES#g" $$YMMSL_FILE

#-------------------------------------------------------
#             return common input arguments
#-------------------------------------------------------
ret_common_args() {
  local common_args="--data_dir=$$INPUT_DATA_DIR \
    --LOG_EXCHANGE_DATA $$LOG_EXCHANGE_DATA \
    --instance_index $$i \
    --coupling_type $$COUPLING_TYPE \
    --num_instances $$NUM_INSTANCES \
    --weather_coupling $$WEATHER_COUPLING"
    echo $$common_args
}

start_time="$$(date -u +%s.%N)"

# load ymmsl file by muscle manager
muscle_manager $$YMMSL_FILE &
manager_pid=$$!


i=-1 # we set instance_index=-1 for muscle submodels manager
common_args="$$(ret_common_args)"


# manager executed only by 1 cores not in parallel
python3 $$RUN_PYTHON_FILE --submodel=macro_manager --muscle-instance=macro_manager $$common_args &
python3 $$RUN_PYTHON_FILE --submodel=micro_manager --muscle-instance=micro_manager $$common_args &


# index should be started from 0
for i in $$(seq 0 $$(($$NUM_INSTANCES-1)))
do
  common_args="$$(ret_common_args)"

  $$run_command $$RUN_PYTHON_FILE --submodel=macro --muscle-instance=macro[$$i] $$common_args &
  $$run_command $$RUN_PYTHON_FILE --submodel=micro --muscle-instance=micro[$$i] $$common_args &
done

touch muscle3_manager.log
tail -f muscle3_manager.log --pid=$${manager_pid}

wait

end_time="$$(date -u +%s.%N)"
elapsed="$$(bc <<<"$$end_time-$$start_time")"

echo -e "\n\nTotal Executing Time = $$elapsed seconds\n" 

#-------------------------------------------------------
#             move muscle3 log files to out/muscle3
#-------------------------------------------------------
mv muscle3*.log out/muscle3/


